{"version":3,"sources":["../../core/module.js"],"names":["Respone","DataBase","mysql","require","connection","createConnection","host","user","password","port","database","connect","err","console","log","Promise","resolve","reject","query","rows","fields","id","type","params","_type","queryAppList","then","appList","queryPromise","_this","data","result","i","promiseArray","queryAppVersion","call","push","all","localVersion","releaseDebugVersion","releaseVersion","app","Object","name","icon_url","version","localPath","path","releaseDebugPath","releasePath","length","catch","version_name","appInfo","insertAppInfo","insertAppVersion","end"],"mappings":"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","file":"module.js","sourcesContent":["import  * as Respone from './resp_func'\r\n\r\nexport default class DataBase {\r\n\r\n    /**\r\n     * 构造函数中引用mysql模块，并且创建连接\r\n     */\r\n    constructor() {\r\n        //测试mysql\r\n        var mysql = require('mysql');  //调用MySQL模块\r\n        //创建一个connection\r\n        this.connection = mysql.createConnection({\r\n            host: '127.0.0.1',       //主机\r\n            user: 'root',               //MySQL认证用户名\r\n            password: 'root',        //MySQL认证用户密码\r\n            port: '3306',                   //端口号\r\n            database: 'keep2iron'\r\n        });\r\n\r\n        this.connect();\r\n    }\r\n\r\n    /**\r\n     * 连接mysql\r\n     */\r\n    connect() {\r\n        //创建一个connection\r\n        this.connection.connect(function (err) {\r\n            if (err) {\r\n                console.log('[query] - :' + err);\r\n                return;\r\n            }\r\n            console.log('[connection connect]  succeed!');\r\n        });\r\n    }\r\n\r\n    queryAppList() {\r\n        return new Promise((resolve, reject) => {\r\n            this.connection.query('SELECT * FROM tbl_app', function (err, rows, fields) {\r\n                if (err) {\r\n                    reject(err);\r\n                    return;\r\n                }\r\n\r\n                resolve(rows);\r\n            });\r\n        });\r\n    }\r\n\r\n    queryAppVersion(id, type) {\r\n        var params = [id, type];\r\n        return new Promise((resolve, reject) => {\r\n            this.connection.query('SELECT version,path FROM tbl_apk_file WHERE id = ? AND type = ?', params, function (err, rows, fields) {\r\n                if (err) {\r\n                    reject(err);\r\n                    return;\r\n                }\r\n\r\n                resolve(rows);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获取数据库中的维护的app\r\n     */\r\n    getApp(type) {\r\n        return new Promise((resolve, reject) => {\r\n            var _type = type;\r\n            this.queryAppList()\r\n                .then(result => {\r\n                    var appList = [];\r\n                    var queryPromise = [];\r\n                    var _this = this;\r\n\r\n                    for (var i = 0; i < result.length; i++) {\r\n                        let data = result[i];\r\n                        let promiseArray = [];\r\n\r\n\r\n                        if ('local' == type) {\r\n                            promiseArray = [_this.queryAppVersion.call(_this, result[i].id, type)];\r\n                        } else if ('releaseDebug' == type) {\r\n                            promiseArray = [_this.queryAppVersion.call(_this, result[i].id, type)];\r\n                        } else if ('release' == type) {\r\n                            promiseArray = [_this.queryAppVersion.call(_this, result[i].id, type)];\r\n                        } else{\r\n                            promiseArray = [_this.queryAppVersion.call(_this, result[i].id, 'local'),\r\n                                _this.queryAppVersion.call(_this, result[i].id, 'releaseDebug'),\r\n                                _this.queryAppVersion.call(_this, result[i].id, 'release')];\r\n                        }\r\n\r\n                        queryPromise.push(Promise.all([\r\n                            _this.queryAppVersion.call(_this, result[i].id, 'local'),\r\n                            _this.queryAppVersion.call(_this, result[i].id, 'releaseDebug'),\r\n                            _this.queryAppVersion.call(_this, result[i].id, 'release')\r\n                        ]).then(([localVersion, releaseDebugVersion, releaseVersion]) => {\r\n                            let app = new Object();\r\n                            app.id = data.id;\r\n                            app.name = data.name;\r\n                            app.icon_url = data.icon_url;\r\n                            if('local' == _type) {\r\n                                app.localVersion = localVersion[0].version;\r\n                                app.localPath = localVersion[0].path;\r\n                            } else if('releaseDebug' == _type) {\r\n                                app.releaseDebugVersion = releaseDebugVersion[0].version;\r\n                                app.releaseDebugPath = releaseDebugVersion[0].path;\r\n                            } else if('release' == _type) {\r\n                                app.releaseVersion = releaseVersion[0].version;\r\n                                app.releasePath = releaseVersion[0].path;\r\n                            }else{\r\n                                app.localVersion = localVersion[0].version;\r\n                                app.localPath = localVersion[0].path;\r\n\r\n                                app.releaseDebugVersion = releaseDebugVersion[0].version;\r\n                                app.releaseDebugPath = releaseDebugVersion[0].path;\r\n\r\n                                app.releaseVersion = releaseVersion[0].version;\r\n                                app.releasePath = releaseVersion[0].path;\r\n                            }\r\n\r\n                            appList.push(app);\r\n                        }));\r\n                    }\r\n\r\n                    Promise.all(queryPromise)\r\n                        .then(() => {\r\n                            resolve(appList);\r\n                        });\r\n                }).catch(err => reject(err));\r\n        });\r\n    }\r\n\r\n\r\n    insertAppInfo(params) {\r\n        return new Promise((resolve, reject) => {\r\n            this.connection.query('INSERT INTO tbl_app(id,name,icon_url) values(?,?,?)', params, function (err, result) {\r\n                if (err) reject(err);\r\n\r\n                console.log(\"update : \" + result);\r\n                resolve(result);\r\n            })\r\n        });\r\n    }\r\n\r\n    insertAppVersion(params) {\r\n        return new Promise((resolve, reject) => {\r\n            this.connection.query('INSERT INTO tbl_apk_file(id,type,path,version) values(?,?,?,?)', params, function (err, result) {\r\n                if (err) reject(err);\r\n\r\n                console.log(\"update : \" + result);\r\n                resolve(result);\r\n            })\r\n        });\r\n    }\r\n\r\n    updateAppVersion(id, type, path, version) {\r\n        var params = [path, version, id, type];\r\n        return new Promise((resolve, reject) => {\r\n            this.connection.query('update tbl_apk_file set path = ?,version = ? where id = ? and type = ?', params, function (err, result) {\r\n                if (err) reject(err);\r\n\r\n                console.log(\"update : \" + result);\r\n                resolve(result);\r\n            })\r\n        });\r\n    }\r\n\r\n    insertApp(id, name, icon_url, version_name) {\r\n        var appInfo = [id, name, icon_url, version_name];\r\n        return this.insertAppInfo(appInfo)\r\n            .then((data) => this.insertAppVersion([id, 'local', '', version_name]))\r\n            .then((data) => this.insertAppVersion([id, 'releaseDebug', '', version_name]))\r\n            .then((data) => this.insertAppVersion([id, 'release', '', version_name]));\r\n    }\r\n\r\n    /**\r\n     * 执行关闭当前连接对象\r\n     */\r\n    close() {\r\n        //关闭connection\r\n        this.connection.end(function (err) {\r\n            if (err) {\r\n                return;\r\n            }\r\n            console.log('[connection end] succeed!');\r\n        });\r\n    }\r\n}"]}